imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: liip.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

monolog:
    handlers:
        logentries:
          type: "stream"
          token: "%logentries_token%"
          use_ssl: false
          level: "DEBUG"
          bubble: true
          timeout: 60
          connection_timeout: 60
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    cache:  false
    form_themes:
        - 'bootstrap_3_layout.html.twig'
    globals:
        app_name: "%app_name%"
        app_version: "%app_version%"
        app_hostname: "%app_hostname%"
        api_hostname: "%api_hostname%"
        app_email: "%app_email%"
        app_email_name: "%app_email_name%"
        app_debug: "%kernel.debug%"
        amazon_s3_url: "%amazon_s3_url%"
        asset_bucket: "%asset_bucket%"

framework:
    #esi:             ~
    #translator:      { fallbacks: ["%locale%"] }
    assets: ~
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        handler_id:  session.handler.pdo
        cookie_lifetime: 2592000 # optional, it is set to 30 days here
        gc_maxlifetime: 2592000 # optional, it is set to 30 days here
    fragments:       ~
    http_method_override: true

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        schema_filter: ~^(?!sessions|login_attempts)~

    orm:
        default_entity_manager: main
        auto_generate_proxy_classes: "%kernel.debug%"
        #metadata_cache_driver: apc
        #query_cache_driver: apc
        mappings:
            TavroCoreBundle: ~

#doctrine_cache:
#    aliases:
#        query_cache: apc_query_cache
#        metadata_cache: apc_metadata_cache
#    providers:
#        apc_metadata_cache:
#            type: apc
#            namespace: metadata_cache_ns
#        apc_query_cache:
#            namespace: query_cache_ns
#            apc: ~

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    username: "%mailer_user%"
    password: "%mailer_password%"
    host: "%mailer_host%"
    port: "%mailer_port%"

stof_doctrine_extensions:
    default_locale: en_US

    # Only used if you activated the Uploadable extension
    uploadable:
        # Default file path: This is one of the three ways you can configure the path for the Uploadable extension
        default_file_path:       "%kernel.root_dir%/../web/uploads"

        # Mime type guesser class: Optional. By default, we provide an adapter for the one present in the HttpFoundation component of Symfony
        mime_type_guesser_class: Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter

        # Default file info class implementing FileInfoInterface: Optional. By default we provide a class which is prepared to receive an UploadedFile instance.
        default_file_info_class: Stof\DoctrineExtensionsBundle\Uploadable\UploadedFileInfo
    orm:
        default:
            sluggable: true

knp_gaufrette:
    stream_wrapper:
        protocol: tavro
    adapters:
        assets:
            aws_s3:
                service_id: tavro.aws_s3
                bucket_name: "%asset_bucket%"
                options:
                    create: true
                    acl: public-read
        files:
            aws_s3:
                service_id: tavro.aws_s3
                bucket_name: "%file_bucket%"
                options:
                    create: true
                    acl: public-read

    filesystems:
        assets:
            adapter:    assets
            alias:      assets_filesystem
        files:
            adapter:    files
            alias:      files_filesystem

lexik_jwt_authentication:
    pass_phrase: "%jwt_token_passphrase%"
    token_ttl: "%jwt_token_ttl%"
    public_key_path: ~
    private_key_path: ~

aws:
    version: latest
    region: us-west-2
    credentials:
        key: ~
        secret: "%secret%"
    DynamoDb:
        region: us-west-2
        credentials: "@tavro.aws_credentials"
    S3:
        version: '2006-03-01'
        credentials: "@tavro.aws_credentials"
    Sqs:
        credentials: "@tavro.aws_credentials"
    Sns:
        credentials: "@tavro.aws_credentials"

litwicki_chargify:
    test_mode: "%kernel.debug%"
    data_format: "json"
    route_prefix: "/billing"
    domain: "%chargify_domain%"
    api_key: "%chargify_api_key%"
    shared_key: "%chargify_shared_key%"
    direct:
        api_id: "%chargify_api_id%"
        api_secret: "%chargify_api_secret%"
        api_password: "%chargify_api_password%"

services:

    tavro_api.subscriber.exception:
        class: Tavro\Bundle\ApiBundle\EventSubscriber\Exception\ExceptionSubscriber
        tags:
            - { name: kernel.event_subscriber }
        arguments: ["@tavro_serializer", "@tavro.logging.exception"]