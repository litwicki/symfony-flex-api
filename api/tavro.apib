FORMAT: 1A
HOST: http://api.tavro.io/api/v1

# tavro.io api

API for working with tavro.io.

# Data Structures

## Role (object)
+ id: 1 (number)
+ name: Administrator (string, required)
+ role: ROLE_ADMIN (string, required)
+ body: Administrators do what they want! (string, required)

## Product Image (object)
+ id: 4 (number)
+ aws_url: https://s3.amazonaws.com/s3bucket/images/products/UfjnDUqN2057.jpg (string)
+ bucket: s3-bucket (string)
+ directory: images (string)
+ aws_key: UfjnDUqN2057.jpg (string)
+ original_filename: filename.jpg (string)
+ mime_type: image/jpeg (string)
+ filesize: 3456543 (number)
+ height: 750 (number)
+ width: 750 (number)

## Service Image (object)
+ id: 11 (number)
+ aws_url: https://s3.amazonaws.com/s3bucket/images/services/ZfjnEFqN1257.jpg (string)
+ bucket: s3-bucket (string)
+ directory: images (string)
+ aws_key: ZfjnEFqN1257.jpg (string)
+ original_filename: symfony.jpg (string)
+ mime_type: image/jpeg (string)
+ filesize: 3456543 (number)
+ height: 500 (number)
+ width: 500 (number)

## Avatar (object)
+ id: 3 (number)
+ aws_url: https://s3.amazonaws.com/s3bucket/images/avatars/4GjxlgWh8dfM.jpg (string)
+ bucket: s3-bucket (string)
+ directory: images (string)
+ aws_key: 4GjxlgWh8dfM.jpg (string)
+ original_filename: jake2016.jpg (string)
+ mime_type: image/jpeg (string)
+ filesize: 3456543 (number)
+ height: 250 (number)
+ width: 250 (number)

## User (object)
+ id: 1 (number, required)
+ username: montoya (string, required)
+ salt (string)
+ email: user@tavro.io
+ signature (string)
+ last_online_date: `2015-08-05T08:40:51.620Z` (string, required)
+ api_key (string)
+ api_enabled (boolean)
+ guid (string)
+ user_ip (string)
+ gender (string)
+ user_agent (string)
+ birthday (string)
+ avatar (Avatar)

## Simple User (object)
+ id: 100
+ username: username
+ email: user@example.com

## Customer User (object)
+ id: 2 (number, required)
+ username: zachary (string, required)
+ salt (string)
+ email: zack@acme.co
+ signature (string)
+ last_online_date: `2015-08-05T08:40:51.620Z` (string, required)
+ api_key (string)
+ api_enabled (boolean)
+ guid (string)
+ user_ip (string)
+ gender (string)
+ user_agent (string)
+ birthday (string)
+ avatar

## Customer2 User (object)
+ id: 20 (number, required)
+ username: zachary (string, required)
+ salt (string)
+ email: aiden@ninja.com
+ signature (string)
+ last_online_date: `2015-08-05T08:40:51.620Z` (string, required)
+ api_key (string)
+ api_enabled (boolean)
+ guid (string)
+ user_ip (string)
+ gender (string)
+ user_agent (string)
+ birthday (string)
+ avatar

## Organization (object)
+ id: 1 (number, required)
+ status (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ title: Zoadilack (string, required)
+ body: Zoadilack writes beautiful code. (string)
+ owner (User)
+ nodes (array)
+ tags (array)
+ users (array)
+ service_categories (array)
+ expense_categories (array)
+ product_categories (array)
+ revenue_categories (array)
+ services (array)
+ expenses (array)
+ products (array)
+ funding_rounds (array)
+ shareholders (array)

## Marvel Organization (object)
+ id: 2 (number, required)
+ status (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ title: Marvel Entertainment (string, required)
+ body: Spiderman, Spiderman, Does whatever a spider can Spins a web, any size, Catches thieves just like flies Look Out! Here comes the Spiderman. (string)

## DC Comics Organization (object)
+ id: 3 (number, required)
+ status (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ title: DC Comics (string, required)
+ body: Nah-nah nah-nah nah-nah nah-nah... BATMAN! (string)

## Customer (object)
+ id: 42 (number, required)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, optional)
+ status: 1 (number, required)
+ first_name: Zachary (string, required)
+ last_name:  Litwicki (string, required)
+ title:  CEO (string, optional)
+ address: 123 Main St (string, required)
+ address2: null (string, optional)
+ city: Maple Valley (string)
+ state: WA (string, required)
+ zip: 98065 (string, required)
+ email: zachary@tavro.io (string, required)
+ phone: 555-867-5309 (string, optional)
+ user (Customer User)
+ organization (Marvel Organization)
+ comments (array)

## Customer2 (object)
+ id: 50 (number, required)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, optional)
+ status: 1 (number, required)
+ first_name: ZoÃ« (string, required)
+ last_name:  Litwicki (string, required)
+ title:  CEO (string, optional)
+ address: 123 Main St (string, required)
+ address2: null (string, optional)
+ city: Maple Valley (string)
+ state: WA (string, required)
+ zip: 98065 (string, required)
+ email: jane.doe@tavro.io (string, required)
+ phone: 555-867-5309 (string, optional)
+ user 
+ organization (Marvel Organization)
+ comments (array)

## Customer3 (object)
+ id: 13 (number, required)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, optional)
+ status: 1 (number, required)
+ first_name: Bruce (string, required)
+ last_name:  Wayne (string, required)
+ title:  CEO (string, optional)
+ address: 123 Main St (string, required)
+ address2: null (string, optional)
+ city: Gotham (string)
+ state: New York (string, required)
+ zip: 12345 (string, required)
+ email: batman@tavro.io (string, required)
+ phone: 555-867-5309 (string, optional)
+ user (Simple User)
+ organization (DC Comics Organization)
+ comments (array)

## Customer4 (object)
+ id: 43 (number, required)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, optional)
+ status: 1 (number, required)
+ first_name: Peter (string, required)
+ last_name:  Parker (string, required)
+ title:  Spiderman (string, optional)
+ address: 123 Main St (string, required)
+ address2: null (string, optional)
+ city: New York (string)
+ state: NY (string, required)
+ zip: 10001 (string, required)
+ email: spiderman@tavro.io (string, required)
+ phone: 555-867-5309 (string, optional)
+ user (Simple User)
+ organization (Marvel Organization)
+ comments (array)

## Comment (object)
+ id: 13 (number, required)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: Boba Fett
+ status: id (number, required)
+ user (User)

## Expense (object)
+ id
+ body
+ amount
+ expense_date
+ category (Expense Category)
+ user (User)
+ customer (Customer)

## Funding Round (object)
+ id: `1` (number, required)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: Series A funding round led by Angel Investors Corporation. (string)
+ type: series-a (string)
+ prospectus: /s3-bucket/docs/zoadilack-prospectus.pdf (string)
+ share_price: 43.00 (number)
+ total_shares: 1000000 (number)
+ organization (Organization)
+ shareholders: [] Shareholders on this Funding Round.
+ comments: [] Comments on this Funding Round.

## Node (object)
+ id: 1 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: A brief overview of Zoadilack's founding. (string)
+ type: blog (string)
+ display_date: `2016-08-05T08:40:51.620Z` (string)
+ views: 0 (number)
+ user (Simple User)
+ organization (Marvel Organization)
+ comments: [] Comments on this Node.
+ tags: [] Tags on this Node.
+ reads: [] Users who have read this Node.

## Simple Node (object)
+ id: 2 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: How to create a new Organization in Tavro. (string)
+ type: article (string)
+ display_date: `2016-08-05T08:40:51.620Z` (string)
+ views: 0 (number)
+ user (Simple User)

## Simple Node2 (object)
+ id: 3 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: How one company used Tavro to go public! (string)
+ type: blog (string)
+ display_date: `2016-08-05T08:40:51.620Z` (string)
+ views: 0 (number)
+ user (Simple User)

## Product (object)
+ id: `1` (number, required)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: A brief product description. (string)
+ price: 24.99 (number)
+ cost: 35.95 (number)
+ category (ProductCategory)
+ organization (Organization)
+ images: [(Product Image)]

## Revenue (object)
+ id: 1 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: Our first big sale! (string)
+ type (string)
+ category (RevenueCategory)
+ user (User)
+ comments: []
+ servics: []
+ products: []
+ tags: []
+ organization (Organization)

## Service (object)
+ id: 1 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ body: Software Development (string)
+ type: hourly (string)
+ price: 150 (number)
+ category (ServiceCategory)
+ organization (Organization)
+ images: [(Service Image)]

## Shareholder (object)
+ id: 1 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ first_name: Jake (string)
+ last_name: Litwicki (string)
+ title: Co-Founder (string)
+ address: 123 Main Street (string)
+ address2: null (string)
+ city: Seattle (string)
+ state: WA (string)
+ zip: 98065 (number)
+ email: jake.litwicki@gmail.com (string)
+ phone: 555-867-5309 (string)
+ notes: Jake purcahsed his shares in pennies! (string)
+ user (User)

## Tag (object)
+ id: 1 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ tag: something (string)
+ body: Software Development (string)
+ organization (Organization)

## Variable (object)
+ id: 1 (number)
+ status: 1 (number)
+ create_date: `2015-08-05T08:40:51.620Z` (string, required)
+ update_date: `2015-08-05T08:40:51.620Z` (string, required)
+ name: variable-name (string)
+ body: The value or somesuch information. (string)
+ organization (Organization)

## Expense Category (object)
+ id
+ body
+ organization (Organization)

## ProductCategory (object)
+ id
+ body
+ organization (Organization)

## RevenueCategory (object)
+ id
+ body
+ organization (Organization)

## ServiceCategory (object)
+ id
+ body
+ organization (Organization)

## Comment [/comments]

### Create Comment [POST /{object}/{id}/comments]

Comments can be created for `customer`, `expense`, `funding_round`, `node`, and `revenue` objects.

+ Parameters
    + object: `node` (string, required) - The object to attach the comment to: customers, funding_rounds, nodes, revenue
    + id: `1` (number, required) - ID of the `PARENT OBJECT` in the form of an integer

+ Request (application/json)

        {
            "body": "This round is ideally for friends and family!",
            "user": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /comments/1

### Edit Comment [PATCH /comments/{id}]

To "remove" a Comment, pass a `status` of `0`.

+ Parameters
    + id: `1` (number, required) - ID of the Comment in the form of an integer

+ Request (application/json)

        {
            "body": "This round of funding is exclusive to friends and family.",
            "status": 1
        }

+ Response 204 (application/json)

### Delete Comment [DELETE /comments/{id}]

Regardless of what object the comment is attached to, you simply delete it by its `id`.

+ Parameters
    + id: `1` (number, required) - ID of the Comment in the form of an integer

+ Response 204 (application/json)

## Customer [/customers]

### All Customers [GET]

Return all `Customer` objects for all `Organizations`. The response will be keyed by `organization_id`.

+ Response 200 (application/json)

    + Attributes (array[Customer2, Customer4])

### View Customer [GET /customers/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Customer in the form of an integer

+ Response 200 (application/json)

    + Attributes
        + data (array) - Response data
            + (Customer)
        + message: Customer retrieved successfully.

### Create Customer [POST]

+ Request (application/json)

        {
            "first_name": "Jane",
            "last_name": "Doe",
            "title": "CEO",
            "address": "123 Main St",
            "address2": "",
            "city": "Maple Valley",
            "state": "WA",
            "zip": "98065",
            "email": "jane.doe@gmail.com",
            "phone": "555-867-5309",
            "user": 1,
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /customers/1

### Edit Customer [PATCH /customers/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Customer in the form of an integer

+ Request (application/json)

        {
            "status": 1
            "first_name": "Jane",
            "last_name": "Doe",
            "title": "CEO",
            "address": "123 Main St",
            "address2": "",
            "city": "Maple Valley",
            "state": "WA",
            "zip": "98065",
            "email": "jane.doe@gmail.com",
            "phone": "555-867-5309",
            "user": 1,
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /customers/1

### Delete Customer [DELETE /customers/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Customer in the form of an integer

+ Response 204 (application/json)

## Expense [/expenses]

### View Expense [GET /expenses/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Expense in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Expense])

### Create Expense [POST]

+ Request (application/json)

        {
            "body": "Apiary for teams",
            "amount": 1.00
            "expense_date": "2009-02-03",
            "category": 3,
            "customer": 10
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /expenses/1

### Delete Expense [DELETE /expenses/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Expense in the form of an integer

+ Response 204 (application/json)

## Expense Category [/expense_categories]

`Expense Category` objects live in isolate by `Organization` and can only be associated to an `Expense`.

### View Expense Category [GET /expense_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Expense Category in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Expense Category])

### Create Expense Category [POST /expense_categories]

+ Request (application/json)

        {
            "body": "Subscriptions",
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /expenses/1

### Edit Expense Category [PATCH /expense_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Expense Category in the form of an integer

+ Request (application/json)

        {
            "body": "Subscriptions",
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /expense_categories/1

### Delete Expense Category [DELETE /expense_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Expense Category in the form of an integer

+ Response 204 (application/json)

## Funding Round [/funding_rounds]

An `Organization` can have multiple `Funding Rounds`, each with their own `Shareholders` of whom can be participants in one or more `Funding Rounds` themselves.

### View Funding Round [GET /funding_rounds/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Funding Round in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Funding Round])

### Create Funding Round [POST]

+ Request (application/json)

        {
            "type": "angel",
            "share_price": 9.99,
            "total_shares": 500000,
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /funding_rounds/1

### Edit Funding Round [PATCH /funding_rounds/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Funding Round in the form of an integer

+ Request (application/json)

        {
            "type": "angel",
            "share_price": 9.99,
            "total_shares": 600000,
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /funding_rounds/1


### Add File [POST /funding_rounds/{id}/files]

Images are uploaded and stored as a separate object that can be viewed separately as `/images/{id}`

+ Parameters
    + id: `1` (number, required) - ID of the Funding Round in the form of an integer

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="files[file]"; filename="document.pdf"
        Content-Type: applicationpdf
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ Response 201 (application/json)

    + Headers

            Location: /images/{id}

### Delete Funding Round [DELETE /funding_rounds/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Funding Round in the form of an integer

+ Response 204 (application/json)

## Image [/images]

### View Image [GET /images/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Image in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Image])

### Delete Image [DELETE /images/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Image in the form of an integer

+ Response 204 (application/json)

## Node [/nodes]

Acceptable `type` is `article`, `blog`, `wiki`, or `node`.

### All Nodes [GET /nodes]

Nodes are keyed by `organization` based on what you have access to.

+ Response 200 (application/json)

    + Attributes (array[Simple Node, Simple Node2])

### View Node [GET /nodes/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Node in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Node])

### Create Node [POST]

- `display_date` will be defaulted to `create_date` unless specified, and cannot be a date in the past.
- `type` will be defaulted to `node` unless specified. Grouping/filtering happens automatically.

+ Request (application/json)

        {
            "title": "My new Node!",
            "body": "<h1>How cool</h1><p>HTML is allowed here!</p>",
            "user": 13,
        }

+ Response 201 (application/json)

    + Headers

            Location: /nodes/{id}

### Edit Node [PATCH /nodes/{id}]

You can change the `type` of a node, but it will be recategorized appropriately on the frontend.

+ Parameters
    + id: `1` (number, required) - ID of the Node in the form of an integer

+ Request (application/json)

        {
            "type": "blog",
            "title": "My New Node",
            "body": "<h1>How Cool</h1><p>HTML is allowed here!</p>"
        }

+ Response 201 (application/json)

    + Headers

            Location: /nodes/{id}


### Delete Node [DELETE /nodes/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Node in the form of an integer

+ Response 204 (application/json)

## Organization [/organizations]

### All Organizations [GET /organizations]

+ Response 200 (application/json)

    + Attributes (array[Marvel Organization, DC Comics Organization])

### View Organization [GET /organizations/{id}]

Viewing a single Organization will return it and **all** of its associated objects.

+ Parameters
    + id: `1` (number, required) - ID of the Organization in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Organization])

### Create Organization [POST]

An `array` of User `id` can be passed to add Users to an Organization.

+ Request (application/json)

        {
            "title": "Spawn Comics",
            "owner": 13,
            "users": [1,43]
        }

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{id}

### Edit Organization [PATCH /organizations/{id}]

- Changing the status of an Organization to `0 (disabled)` will disallow the creation of all content on that Organization.
- Passing an array of User `ids` can manage the assigned Users.

+ Parameters
    + id: `1` (number, required) - ID of the Organization in the form of an integer

+ Request (application/json)

        {
            "title": "Spawn Comics",
            "owner": 43,
            "status": 1,
            "users": [43]
        }

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{id}


### Delete Organization [DELETE /organizations/{id}]

Deleting an Organization will remove it and all of the associated objects. This can only be done by the Owner (User) of the Organization.

+ Parameters
    + id: `1` (number, required) - ID of the Organization in the form of an integer

+ Response 204 (application/json)

## Product [/products]

### All Products [GET]

Products are keyed by `Organization` you have access to, and given a limited serialization data set.

+ Response 200 (application/json)

    + Attributes (array[Product])

### View Product [GET /products/{id}]

Viewing a single `Product` yields a full serialized data set.

+ Parameters
    + id: `1` (number, required) - ID of the Organization in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Product])

### Create Product [POST /products]

Category must be the `id` of a `ProductCategory`

+ Request (application/json)

        {
            "title": "Product name",
            "body": "This product is amazing",
            "price": 79.99,
            "cost": 99.99,
            "category": 2
        }

+ Response 201 (application/json)

    + Headers

            Location: /products/{id}

### Edit Product [PATCH /products/{id}]

A `status` of `0` will result in the Product no longer being available for association.

+ Parameters
    + id: `1` (number, required) - ID of the Product in the form of an integer

+ Request (application/json)

        {
            "title": "Product Name",
            "body": "",
            "price": 79.99,
            "cost": 99.99,
            "category": 2,
            "status": 1,

        }

+ Response 201 (application/json)

    + Headers

            Location: /products/{id}

### Add Image [POST /products/{id}/images]

Images are uploaded and stored as a separate object that can be viewed separately as `/images/{id}`

+ Parameters
    + id: `1` (number, required) - ID of the Product in the form of an integer

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="image[file]"; filename="image.jpg"
        Content-Type: image/jpeg
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ Response 201 (application/json)

    + Headers

            Location: /images/{id}

### Delete Product [DELETE /products/{id}]

You can only `DELETE` a product that has not been associated with any `Revenue` objects.

+ Parameters
    + id: `1` (number, required) - ID of the Product in the form of an integer

+ Response 204 (application/json)

## Product Category [/product_categories]

`Product Category` objects live in isolate by `Organization` and can only be associated to an `Product`.

### All Product Categories [GET]

+ Response 200 (application/json)

    + Attributes (array[Product Category])

### View Product Category [GET /product_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Product Category in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Expense Category])

### Create Product Category [POST /product_categories]

+ Request (application/json)

        {
            "body": "Printed Material",
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /product_categories/{id}

### Edit Product Category [PATCH /product_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Product Category in the form of an integer

+ Request (application/json)

        {
            "body": "Prints",
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /product_categories/{id}

### Delete Product Category [DELETE /product_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Product Category in the form of an integer

+ Response 204 (application/json)

## Revenue [/revenue]

### All Revenue [GET]

Revenues are keyed by `Organization` you have access to, and given a limited serialization data set.

+ Response 200 (application/json)

    + Attributes (array[Revenue])

### View Revenue [GET /revenue/{id}]

View a `Revenue` object, and all the associated `Revenue Project` and `Revenue Service` objects.

+ Parameters
    + id: `1` (number, required) - ID of the Revenue in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Revenue])

### Create Revenue [POST /revenue]

To create a `Revenue` you must also include the associated `Product` and `Service` objects on this `Revenue` object to calculate its total value.

+ Request (application/json)

        {
            "title": "Our first sale!",
            "body": "This is our first official product sale as a new business!",
            "category": 1,
            "organization": 1,
            "customer": 13,
            "user": 43
        }

+ Response 201 (application/json)

    + Headers

            Location: /revenue/{id}

### Edit Revenue [PATCH /revenue/{id}]

Editing a `Revenue` object only edits the core data of that object, not its associated objects.

+ Parameters
    + id: `1` (number, required) - ID of the Revenue in the form of an integer

+ Request (application/json)

        {
            "title": "Our first sale!",
            "body": "This is our first official product sale as a new business!",
            "category": 1,
            "organization": 1,
            "customer": 13,
            "user": 43
        }

+ Response 201 (application/json)

    + Headers

            Location: /revenue/1

### Delete Revenue [DELETE /revenue/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Revenue in the form of an integer

+ Response 204 (application/json)

## Revenue Category [/revenue_categories]

`Revenue Category` objects live in isolate by `Organization` and can only be associated to an `Revenue`.

### All Revenue Categories [GET]

+ Response 200 (application/json)

    + Attributes (array[Product Category])

### View Revenue Category [GET /revenue_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Revenue Category in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Revenue Category])

### Create Revenue Category [POST /revenue_categories]

+ Request (application/json)

        {
            "body": "Revenue type",
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /revenue_categories/{id}

### Edit Revenue Category [PATCH /revenue_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Revenue Category in the form of an integer

+ Request (application/json)

        {
            "body": "Revenue type",
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /revenue_categories/{id}

### Delete Product Category [DELETE /revenue_categories/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Product Category in the form of an integer

+ Response 204 (application/json)

## Service [/services]

Services are keyed by `Organization` you have access to, and given a limited serialization data set.

### All Services [GET]

+ Response 200 (application/json)

    + Attributes (array[Service])

### View Service [GET /services/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Service in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Service])

### Create Service [POST /services]

+ Request (application/json)

        {
            "title": "Service name",
            "body": "Service description",
            "price": 24.99,
            "type": "service type",
            "category": 1,
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /services/{id}

### Add Image [POST /services/{id}/images]

Images are uploaded and stored as a separate object that can be viewed separately as `/images/{id}`

+ Parameters
    + id: `1` (number, required) - ID of the Service in the form of an integer

+ Request (multipart/form-data; boundary=---BOUNDARY)

        -----BOUNDARY
        Content-Disposition: form-data; name="image[file]"; filename="image.jpg"
        Content-Type: image/jpeg
        Content-Transfer-Encoding: base64

        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
        HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAABAAEDASIA
        AhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAf/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFAEB
        AAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AL+AD//Z
        -----BOUNDARY

+ Response 201 (application/json)

    + Headers

            Location: /images/{id}

### Edit Service [PATCH /services/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Service in the form of an integer

+ Request (application/json)

        {
            "body": "Revenue type",
            "organization": 1
        }

+ Response 201 (application/json)

    + Headers

            Location: /services/{id}

### Delete Service [DELETE /services/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Service in the form of an integer

+ Response 204 (application/json)

## Shareholder [/shareholders]

Shareholders are keyed by `Organization` you have access to, and given a limited serialization data set.

### All Shareholders [GET]

+ Response 200 (application/json)

    + Attributes (array[Shareholder])

### View Shareholder [GET /shareholders/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Shareholder in the form of an integer

+ Response 200 (application/json)

    + Attributes (array[Shareholder])

### Create Shareholder [POST /shareholders]

Creating a `Shareholder` requires all personal data, as well as the `funding_round_id`.

+ Request (application/json)

        {
            "first_name": "Jane",
            "last_name": "Doe",
            "title": "Semi Retired",
            "address": "123 Main St",
            "city": "Seattle",
            "state": "WA",
            "zip": 98065,
            "email": "jane.doe@company.com",
            "phone": "555-222-9595",
            "notes": "",
            "shares": 100,
            "funding_round": 2
        }

+ Response 201 (application/json)

    + Headers

            Location: /shareholders/{id}

### Edit Shareholder [PATCH /shareholders/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Shareholder in the form of an integer

+ Request (application/json)

        {
            "first_name": "Jane",
            "last_name": "Doe",
            "title": "Venture Capitalist",
            "address": "1212 Main St",
            "city": "Seattle",
            "state": "WA",
            "zip": 98101,
            "email": "jane.doe@company.com",
            "phone": "555-222-9595",
            "notes": "Paid by check in person on Tuesday",
            "shares": 1000
        }

+ Response 201 (application/json)

    + Headers

            Location: /shareholders/{id}

### Delete Shareholder [DELETE /shareholders/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Shareholder in the form of an integer

+ Response 204 (application/json)

## Tag [/tags]

### Create Tag [POST /{object}/{id}/tags]

Comments can be created for `expense`, `node` and `revenue` objects.

+ Parameters
    + object: `node` (string, required) - The object to attach the comment to: customers, funding_rounds, nodes, revenue
    + id: `1` (number, required) - ID of the `PARENT OBJECT` in the form of an integer

+ Request (application/json)

        {
            "tag": "tags are always lowercased"
        }

+ Response 201 (application/json)

    + Headers

            Location: /tags/1

### Edit Tag [PATCH /tags/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Comment in the form of an integer

+ Request (application/json)

        {
            "tag": "tags are always lowercased",
            "body": "Some tags may require a description, who knows?!"
        }

+ Response 204 (application/json)

### Delete Tag [DELETE /tags/{id}]

Regardless of what object the `Tag` is attached to, you simply delete it by its `id`.

+ Parameters
    + id: `1` (number, required) - ID of the Tag in the form of an integer

+ Response 204 (application/json)

## Variable [/variables]

Variables cannot be created or deleted, and only their `body` updated.

### Edit Variable [PATCH /variables/{id}]

+ Parameters
    + id: `1` (number, required) - ID of the Variable in the form of an integer

+ Request (application/json)

        {
            "body": "The body or value"
        }

+ Response 204 (application/json)
